#!/usr/bin/php
<?php
/**
 * moOde audio player (C) 2014 Tim Curtis
 * http://moodeaudio.org
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

const VERSION = '1.9.0';

// Suppress warning messages
error_reporting(E_ERROR | E_PARSE);

// ** From common.php
// Common
const MPD_RESPONSE_ERR = 'ACK';
const MPD_RESPONSE_OK = 'OK';
const MPD_MUSICROOT = '/var/lib/mpd/music/';
const MPD_PLAYLIST_ROOT = '/var/lib/mpd/playlists/';
const PLAYLIST_COVERS_ROOT = '/var/local/www/imagesw/playlist-covers/';
const RADIO_LOGOS_ROOT = '/var/local/www/imagesw/radio-logos/';
const TMP_IMAGE_PREFIX = '__tmp__';
const SQLDB = 'sqlite:/var/local/www/db/moode-sqlite3.db';
const SQLDB_PATH = '/var/local/www/db/moode-sqlite3.db';
const MOODE_LOG = '/var/log/moode.log';
const AUTOCFG_LOG = '/home/pi/autocfg.log';
const MPD_LOG = '/var/log/mpd/log';
const PORT_FILE = '/tmp/portfile';
const THMCACHE_DIR = '/var/local/www/imagesw/thmcache/';
const LIBCACHE_BASE = '/var/local/www/libcache';
const ALSA_PLUGIN_PATH = '/etc/alsa/conf.d';
const SESSION_SAVE_PATH = '/var/local/php';
const STATION_EXPORT_DIR = '/var/local/www/imagesw';
const MPD_VERSIONS_CONF = '/var/local/www/mpd_versions.conf';
const LOGO_ROOT_DIR = 'imagesw/radio-logos/';
const DEF_RADIO_COVER = 'images/default-cover-v6.svg';
const DEF_COVER = 'images/default-cover-v6.svg';
const DEV_ROOTFS_SIZE = 3670016000; // Bytes (3.5GB)
const LOW_DISKSPACE_LIMIT = 524288; // Bytes (512MB)
const ROOT_DIRECTORIES = array('NAS', 'SDCARD', 'USB');

// Features availability bitmask
// NOTE: Updates must also be made to matching code blocks in playerlib.js, sysinfo.sh, moodeutl, and footer.php
// sqlite3 /var/local/www/db/moode-sqlite3.db "select value from cfg_system where param='feat_bitmask'"
// sqlite3 /var/local/www/db/moode-sqlite3.db "UPDATE cfg_system SET value='31671' WHERE param='feat_bitmask'"
const FEAT_KERNEL		= 1;		// y Kernel architecture option on System Config
const FEAT_AIRPLAY		= 2;		// y Airplay renderer
const FEAT_MINIDLNA 	= 4;		// y DLNA server
const FEAT_RECORDER		= 8; 		//   Stream recorder
const FEAT_SQUEEZELITE	= 16;		// y Squeezelite renderer
const FEAT_UPMPDCLI 	= 32;		// y UPnP client for MPD
const FEAT_SQSHCHK		= 64;		// 	 Require squashfs for software update
const FEAT_ROONBRIDGE	= 128;		// y RoonBridge renderer
const FEAT_LOCALUI		= 256;		// y Local display
const FEAT_INPSOURCE	= 512;		// y Input source select
const FEAT_UPNPSYNC 	= 1024;		//   UPnP volume sync
const FEAT_SPOTIFY		= 2048;		// y Spotify Connect renderer
const FEAT_GPIO 		= 4096;		// y GPIO button handler
const FEAT_RESERVED		= 8192;		// y Reseved for future use
const FEAT_BLUETOOTH	= 16384;	// y Bluetooth renderer
const FEAT_DEVTWEAKS	= 32768;	//   Developer tweaks
const FEAT_MULTIROOM	= 65536;	// y Multiroom audio
//						-------
//						  97207
// ** End

$features = array(
	FEAT_KERNEL => 'Kernel architecture',
	FEAT_AIRPLAY =>	'Airplay renderer',
	FEAT_MINIDLNA => 'DLNA server',
	FEAT_RECORDER => 'Stream recorder',
	FEAT_SQUEEZELITE => 'Squeezelite renderer',
	FEAT_UPMPDCLI => 'UPnP client for MPD',
	FEAT_SQSHCHK => 'Require squashfs for software update',
	FEAT_ROONBRIDGE => 'RoonBridge renderer',
	FEAT_LOCALUI => 'Local display',
	FEAT_INPSOURCE => 'Input source select',
	FEAT_UPNPSYNC => 'UPnP volume sync',
	FEAT_SPOTIFY => 'Spotify Connect renderer',
	FEAT_GPIO => 'GPIO button handler',
	FEAT_RESERVED => 'Reserved for future use',
	FEAT_BLUETOOTH => 'Bluetooth renderer',
	FEAT_DEVTWEAKS	=> 'Developer tweaks',
	FEAT_MULTIROOM	=> 'Multiroom audio'
);

$feat_bitmask = trim(shell_exec('sqlite3 ' .  SQLDB_PATH . " \"SELECT value FROM cfg_system WHERE param='feat_bitmask'\""));

$option = isset($argv[1]) ? $argv[1] : '';

switch ($option) {
	case '-a':
		print_features($features, $feat_bitmask);
		break;
	case '-A':
		update_features($features, $feat_bitmask, $argv);
		break;
	case '-c':
		detect_cifs_version($argv);
		break;
	case '-C':
		detect_cifs_shares($argv);
		break;
	case '-d':
		dump_session();
		break;
	case '-D':
		delete_session_var($argv);
		break;
	case '-e':
		export_autoconfig($argv);
		break;
	case '-f':
	case '-F':
		audio_formats($option);
		break;
	case '-i':
		import_autoconfig();
		break;
	case '-l':
		moode_log();
		break;
	case '-m':
		system_monitor();
		break;
	case '-n':
		detect_nbt_hosts();
		break;
	case '-o':
		list_audio_overlays();
		break;
	case '-q':
		sql_query($argv);
		break;
	case '-r':
		restart_servers();
		break;
	case '-R':
		restart_renderer($argv);
		break;
	case '-s':
		system_info();
		break;
	case '-t':
		tail_log();
		break;
	case '-u':
	case '-U':
		check_station_urls($argv);
		break;
	case '--btreset':
		bluetooth_reset();
		break;
	case '--mpdlog':
		mpd_log();
		break;
	case '--mooderel':
		$file = file_get_contents('/var/www/footer.min.php');
		echo substr($file, strpos($file, 'Release: ') + 9, 16) . "\n";
		break;
	case '--revision':
		echo shell_exec('/var/www/command/pirev.py');
		break;
	case '--version':
		echo VERSION . "\n";
		break;
	case '--help':
	default:
		echo
"Usage: moodeutl [OPTION]
Moode utility programs

With no OPTION print the help text and exit.

 -a\t\tPrint features availability
 -A [add|rm N] \tUpdate features availability
 -c\t\tDetect highest CIFS protocol version [host or ip address]
 -C\t\tDetect CIFS shares [host or ip address]
 -d\t\tDump session file (requires sudo)
 -D [var name] \tDelete session variable (requires sudo)
 -e [filename]\tExport settings to [filename] or ./moodecfg-<timestamp>.ini
 -i\t\tImport /boot/moodecfg.ini
 -f\t\tPrint supported audio formats
 -F\t\tPrint full alsacap info
 -l\t\tPrint moode log
 -m\t\tRun system monitor
 -n\t\tDetect NBT (Samba) hosts
 -o\t\tList audio overlays
 -p\t\tImport playlists
 -q\t\tQuery sql database
 -r\t\tRestart servers
 -R\t\tRestart renderer [--bluetooth | --airplay | --spotify | --squeezelite | --roonbridge]
 -s\t\tPrint system info
 -t\t\tPrint last 10 lines of moode log and wait
 -u\t\tCheck radio station urls for playability
 -U\t\tCheck station urls, list only unplayable
 --btreset\tReset Bluetooth to off
 --mpdlog\tPrint MPD log
 --mooderel\tPrint moOde release
 --revision\tPrint the hardware revision
 --version\tPrint the program version
 --help\t\tPrint this help text\n";
		break;
}

function sysCmd($cmd) {
	exec('sudo ' . $cmd . " 2>&1", $output);
	return $output;
}

function print_features($features, $feat_bitmask) {
	foreach ($features as $key => $value) {
		echo $key . "\t" . ($key & $feat_bitmask ? 'y' : '') . "\t" . $value . "\n";
	}
}

function update_features($features, $feat_bitmask, $argv) {
	if (!isset($argv[2])) {
		echo 'Missing 2nd argument [add or rm]' . "\n";
		return;
	}
	if (!($argv[2] == 'add' || $argv[2] == 'rm')) {
		echo '2nd argument must be add or rm' . "\n";
		return;
	}
	if (!isset($argv[3])) {
		echo "Missing 3rd argument [N], the feature's numeric value" . "\n";
		return;
	}

	$match = false;
	foreach ($features as $key => $value) {
		if ($argv[3] == $key) {
			$match = true;
			break;
		}
	}

	$bitmask = (int)$feat_bitmask;
	$arg3 = (int)$argv[3];

	if ($match == false) {
		echo '3rd argument N does equal any feature value' . "\n";
		return;
	}
	elseif ($argv[2] == 'add' && ($arg3 & $bitmask)) {
		echo 'Feature is already enabled, cannot add' . "\n";
		return;
	}
	elseif ($argv[2] == 'rm' && !($arg3 & $bitmask)) {
		echo 'Feature is not already enabled, cannot remove' . "\n";
		return;
	}
	else {
		$new_bitmask = $argv[2] == 'add' ? $bitmask + $arg3 : $bitmask - $arg3;
		shell_exec("sqlite3 " .  SQLDB_PATH . " \"UPDATE cfg_system set value='" . $new_bitmask . "' WHERE param='feat_bitmask'\"");
		echo 'Old bitmask ' . $feat_bitmask . "\n";
		echo 'New bitmask ' . $new_bitmask . "\n";
	}
}

function dump_session() {
	if (posix_getuid() != 0){
		echo "This option requires sudo\n";
		return;
	}

	$session_id = trim(shell_exec("sqlite3 " . SQLDB_PATH . " \"SELECT value FROM cfg_system WHERE param='sessionid'\""));
	session_id($session_id);
	session_start();
	foreach ($_SESSION as $key => $value) {
		// Radio stations
		if (substr($key, 0, 4) == 'http') {
			echo $key . '|' . $value['name'] . '|' . $value['type'] . '|' . $value['bitrate'] . '|' . $value['format'] . "\n";
		}
		// Cfg_system, etc
		else {
			echo $key . '|' . (is_array($value) ? 'Array' : $value) . "\n";
		}
	}
	session_write_close();
}

function delete_session_var($argv) {
	if (posix_getuid() != 0){
		echo "This option requires sudo\n";
		return;
	}

	if (!isset($argv[2])) {
		echo 'Missing 2nd argument [variable name]' . "\n";
		return;
	}

	$session_id = trim(shell_exec("sqlite3 " . SQLDB_PATH . " \"SELECT value FROM cfg_system WHERE param='sessionid'\""));
	session_id($session_id);
	session_start();
	unset($_SESSION[$argv[2]]);
	session_write_close();
}

function audio_formats($option) {
	$cardnum = trim(shell_exec("sqlite3 " . SQLDB_PATH . " \"SELECT value FROM cfg_mpd WHERE param='device'\""));

	if (empty(trim(file_get_contents('/proc/asound/card' . $cardnum . '/id')))) {
		echo 'No device found at MPD configured card ' . $cardnum . "\n";
	}
	else {
		$audio_output = trim(shell_exec('cat /proc/asound/card' . $cardnum . '/pcm0p/sub0/hw_params | grep closed'));

		if ($audio_output == 'closed') {
			// Just formats for the configured device
			if ($option == '-f') {
				$result = shell_exec('alsacap -C ' . $cardnum . ' -D 0 2>&1 | grep "Sample formats:"');
				if (!empty($result)) {
					echo explode(': ', $result)[1];
				}
				else {
					echo "Unable to detect formats\n";
				}
			}
			// $option == '-F': full info for all devices
			else {
				$result = shell_exec('alsacap 2>&1');
				echo $result;
			}
		}
		else {
			if (posix_getuid() != 0){
				echo "This option requires sudo if the device is in use\n";
				return;
			}

			$session_id = trim(shell_exec("sqlite3 " . SQLDB_PATH . " \"SELECT value FROM cfg_system WHERE param='sessionid'\""));
			session_id($session_id);
			session_start();
			$formats = $_SESSION['audio_formats'];
			session_write_close();
			echo $formats . "\n";
		}
	}
}

function moode_log() {
	echo shell_exec('cat ' . MOODE_LOG);
}

function system_monitor() {
	echo "Gathering data...\r";
	while(true) {
		// Frequency
		$cpu_freq = file_get_contents('/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq');
		if ($cpu_freq < 1000000) {
	        $cpu_freq = number_format((int)$cpu_freq / 1000, 0, '.', '');
	        $cpu_freq .= ' MHz';
		}
		else {
	        $cpu_freq = number_format((int)$cpu_freq / 1000000, 1, '.', '');
	        $cpu_freq .= ' GHz';
		}

		// Temp
		$cpu_temp = substr(file_get_contents('/sys/class/thermal/thermal_zone0/temp'), 0, 2);

		// CPU
		$cpu_load = exec("top -bn 2 -d 1.0 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load += exec("top -bn 2 -d 0.75 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load = $cpu_load / 2;
		$cpu_load = number_format($cpu_load,0,'.','');

		// Memory
		$mem_total = exec("grep MemTotal /proc/meminfo | awk '{print $2}'");
		$mem_avail = exec("grep MemAvailable /proc/meminfo | awk '{print $2}'");
		$mem_util = number_format(100 * (1 - ($mem_avail / $mem_total)), 0, '.', '');

		// Disk
		$disk_used = exec("df -h -l | awk 'FNR==2 {print $5}'");
		$disk_free = exec("df -h -l | grep /dev/root | awk '{print $4}'");

		// PHP FPM pool count
		$fpm_pool = exec('pgrep -c -f "php-fpm: pool www"');

		echo 'CPU: ' . $cpu_freq . ' | LOAD: ' . $cpu_load . '%' . ' | TEMP: ' . $cpu_temp . "\xB0" . 'C | RAM_USED: ' . $mem_util . '% | DISK_USED: ' . $disk_used . ' | DISK_FREE: ' . $disk_free . ' | FPM_POOL: ' . $fpm_pool . ' workers ' . "\r";
	}
}

function sql_query($argv) {
	echo shell_exec("sqlite3 " . SQLDB_PATH . " \"" . $argv[2] . "\"");
}

function restart_servers() {
	exec('sudo killall worker.php');
	exec('sudo killall watchdog.sh');
	exec('sudo rm /run/worker.pid');
	exec('sudo systemctl restart php7.4-fpm');
	exec('sudo systemctl restart nginx');
	exec('sudo systemctl stop mpd');
	exec('sudo systemctl stop localui');
	exec('sudo /var/www/command/worker.php');
	echo "Servers restarted\n";
}

function restart_renderer($argv) {
	$renderers = array('--bluetooth' => 'btsvc', '--airplay' => 'airplaysvc', '--spotify' => 'spotifysvc',
		'--squeezelite' => 'slsvc', '--roonbridge' => 'rbsvc');

	if (!isset($argv[2])) {
		echo 'Missing 2nd argument [renderer name]' . "\n";
		return;
	}
	else if (array_key_exists($argv[2], $renderers)) {
		$svc_name = $renderers[$argv[2]];
		$svc_on = trim(shell_exec("sqlite3 " .  SQLDB_PATH . " \"SELECT value FROM cfg_system WHERE param='" . $svc_name . "'\""));
		if ($svc_on == '0') {
			echo 'Renderer is not currently on' . "\n";
			return;
		}
	}
	else {
		echo 'Invalid renderer name' . "\n";
		echo 'Valid names are: --bluetooth, --airplay, --spotify, --squeezelite, --roonbridge' . "\n";
		return;
	}

	sysCmd('/var/www/command/restart-renderer.php ' . $argv[2]);
	echo 'Renderer restarted' . "\n";
}

function system_info() {
	echo "Gathering info...\n";
	echo shell_exec('sudo /var/www/command/sysinfo.sh');
}

function tail_log() {
	$size = filesize(MOODE_LOG) - 1024;
	while (true) {
		clearstatcache();
		$current_size = filesize(MOODE_LOG);
		if ($size == $current_size) {
			sleep(1);
		    continue;
		}

		$fh = fopen(MOODE_LOG, "r");
		fseek($fh, $size);

		while ($d = fgets($fh)) {
			echo $d;
		}
		fclose($fh);
		$size = $current_size;
	}
}

function check_station_urls($argv) {
	error_reporting(E_ERROR | E_PARSE);
	$results = shell_exec("sqlite3 " . SQLDB_PATH .
		" \"SELECT id, station, name, geo_fenced FROM cfg_radio WHERE station not in ('OFFLINE', 'zx reserved 499')\"");
	$line = strtok($results, "\n");
	echo "Checking...\n";
	echo 'Id' . "\t" . 'URL' . "\t" . 'Station' . "\n";
	while ($line) {
		list($id, $url, $name, $geo_fenced) = explode('|', $line);
		// Skip BBC and any other geo-fenced stations
		if ($geo_fenced == 'No') {
			$tmpfile = file_get_contents($url, FALSE, NULL, 0, 1024);
			$playable = false === $tmpfile ? '?' : 'OK';
			if ($tmpfile == false) {
				echo $id . "\t" . '?' . "\t" . $name . ' | ' . $url . "\n";
			}
			elseif ($argv[1] == '-u') {
				echo $id . "\t" . 'OK' . "\t" . $name . "\n";
			}
		}
		$line = strtok("\n");
	}
}

function export_autoconfig($argv) {
	$cfgfile = count($argv)==3 ? $argv[2] : sprintf("/home/pi/moodecfg-%s.ini", date('ymd_His'));
	echo "Current moOde settings exported to " . $cfgfile . "\n";
	echo shell_exec('/var/www/command/autocfggen.php > ' . $cfgfile);
}

function import_autoconfig() {
	echo "Import moOde autoconfig settings\n";
	echo shell_exec('sudo /var/www/command/autocfgimport.php');
}

function list_audio_overlays() {
	$dir = '/boot/overlays/';
	$files = scandir($dir);

	foreach ($files as $file) {
		$contents = file_get_contents($dir . $file);
		if (strpos($contents, 'sound-dai-cells') !== false || $file == 'rpi-cirrus-wm5102.dtbo') {
			echo $file . "\n";
		}
	}
}

function bluetooth_reset() {
	shell_exec("sqlite3 " .  SQLDB_PATH . " \"UPDATE cfg_system set value='0' WHERE param='btsvc'\"");
	shell_exec("sqlite3 " .  SQLDB_PATH . " \"UPDATE cfg_system set value='0' WHERE param='pairing_agent'\"");
	echo 'Bluetooth reset to off, reboot required' . "\n";
}

function mpd_log() {
	echo shell_exec('cat ' . MPD_LOG);
}

function detect_cifs_version($argv) {
	if (!isset($argv[2])) {
		echo 'Missing host or IP address' . "\n";
		return;
	}

	$output = trim(shell_exec("nmap -Pn " . $argv[2] . " -p 139 --script smb-protocols |grep \|"));
	$output = explode("\n", $output);
	$parts = explode('  ', end($output));
	$msg = 'CIFS version could not be detected' . "\n";

	if (count($parts) >= 2) {
		$version = trim($parts[2]);
		$cifs_versions = array(
			"2.02" => "2.0",
			"2.10" => "2.1",
			"3.00" => "3.0",
			"3.02" => "3.0.2",
			"3.11" => "3.1.1"
		);

		if (strpos($version, 'SMBv1')) {
			$version = '1.0';
		}
		elseif (array_key_exists($version, $cifs_versions)) {
			$version = $cifs_versions[$version];
		}

		$msg = 'CIFS version: ' . $version . "\n";
	}

	echo $msg;
}
function detect_cifs_shares($argv) {
	if (!isset($argv[2])) {
		echo 'Missing host or IP address' . "\n";
		return;
	}

	echo shell_exec("smbclient -N -g -L " . $argv[2] . " | grep Disk | cut -f 2 -d '|'");
}

function detect_nbt_hosts() {
	// Run a few times to pick up as many hosts as possible
	for ($i = 0; $i < 3; $i++) {
		$output = shell_exec("nmblookup -S -T '*' | grep '*<00>' | cut -f 1 -d '*'");
	}

	echo $output;
}
